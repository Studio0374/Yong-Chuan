/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.microvisor.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Device extends Resource {
    private static final long serialVersionUID = 203672572420545L;

    /**
     * Create a DeviceReader to execute read.
     *
     * @return DeviceReader capable of executing the read
     */
    public static DeviceReader reader() {
        return new DeviceReader();
    }

    /**
     * Create a DeviceFetcher to execute fetch.
     *
     * @param pathSid A string that uniquely identifies this Device.
     * @return DeviceFetcher capable of executing the fetch
     */
    public static DeviceFetcher fetcher(final String pathSid) {
        return new DeviceFetcher(pathSid);
    }

    /**
     * Create a DeviceUpdater to execute update.
     *
     * @param pathSid A string that uniquely identifies this Device.
     * @return DeviceUpdater capable of executing the update
     */
    public static DeviceUpdater updater(final String pathSid) {
        return new DeviceUpdater(pathSid);
    }

    /**
     * Converts a JSON String into a Device object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Device object represented by the provided JSON
     */
    public static Device fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Device.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Device object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Device object represented by the provided JSON
     */
    public static Device fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Device.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sid;
    private final String uniqueName;
    private final String accountSid;
    private final Map<String, Object> app;
    private final Map<String, Object> logging;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;
    private final URI url;

    @JsonCreator
    private Device(@JsonProperty("sid")
                   final String sid,
                   @JsonProperty("unique_name")
                   final String uniqueName,
                   @JsonProperty("account_sid")
                   final String accountSid,
                   @JsonProperty("app")
                   final Map<String, Object> app,
                   @JsonProperty("logging")
                   final Map<String, Object> logging,
                   @JsonProperty("date_created")
                   final String dateCreated,
                   @JsonProperty("date_updated")
                   final String dateUpdated,
                   @JsonProperty("url")
                   final URI url) {
        this.sid = sid;
        this.uniqueName = uniqueName;
        this.accountSid = accountSid;
        this.app = app;
        this.logging = logging;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
        this.url = url;
    }

    /**
     * Returns A string that uniquely identifies this Device..
     *
     * @return A string that uniquely identifies this Device.
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns A developer-defined string that uniquely identifies the Device..
     *
     * @return A developer-defined string that uniquely identifies the Device.
     */
    public final String getUniqueName() {
        return this.uniqueName;
    }

    /**
     * Returns Account SID..
     *
     * @return Account SID.
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns Information about the target App and the App reported by this
     * Device..
     *
     * @return Information about the target App and the App reported by this Device.
     */
    public final Map<String, Object> getApp() {
        return this.app;
    }

    /**
     * Returns Object specifying whether application logging is enabled for this
     * Device..
     *
     * @return Object specifying whether application logging is enabled for this
     *         Device.
     */
    public final Map<String, Object> getLogging() {
        return this.logging;
    }

    /**
     * Returns The date that this Device was created..
     *
     * @return The date that this Device was created.
     */
    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The date that this Device was last updated..
     *
     * @return The date that this Device was last updated.
     */
    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    /**
     * Returns The URL of this resource..
     *
     * @return The URL of this resource.
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Device other = (Device) o;

        return Objects.equals(sid, other.sid) &&
               Objects.equals(uniqueName, other.uniqueName) &&
               Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(app, other.app) &&
               Objects.equals(logging, other.logging) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(dateUpdated, other.dateUpdated) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sid,
                            uniqueName,
                            accountSid,
                            app,
                            logging,
                            dateCreated,
                            dateUpdated,
                            url);
    }
}
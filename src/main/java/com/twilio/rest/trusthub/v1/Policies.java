/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.trusthub.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Map;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Policies extends Resource {
    private static final long serialVersionUID = 88232751562950L;

  public String toString() {
    return "Policies(sid=" + this.getSid() + ", friendlyName=" + this.getFriendlyName() + ", requirements=" + this.getRequirements() + ", url=" + this.getUrl() + ")";
  }

  public enum EndUserType {
        INDIVIDUAL("individual"),
        BUSINESS("business");

        private final String value;

        private EndUserType(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a EndUserType from a string.
         * @param value string value
         * @return generated EndUserType
         */
        @JsonCreator
        public static EndUserType forValue(final String value) {
            return Promoter.enumFromString(value, EndUserType.values());
        }
    }

    /**
     * Create a PoliciesReader to execute read.
     *
     * @return PoliciesReader capable of executing the read
     */
    public static PoliciesReader reader() {
        return new PoliciesReader();
    }

    /**
     * Create a PoliciesFetcher to execute fetch.
     *
     * @param pathSid The unique string that identifies the Policy resource
     * @return PoliciesFetcher capable of executing the fetch
     */
    public static PoliciesFetcher fetcher(final String pathSid) {
        return new PoliciesFetcher(pathSid);
    }

    /**
     * Converts a JSON String into a Policies object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Policies object represented by the provided JSON
     */
    public static Policies fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Policies.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Policies object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Policies object represented by the provided JSON
     */
    public static Policies fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Policies.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sid;
    private final String friendlyName;
    private final Map<String, Object> requirements;
    private final URI url;

    @JsonCreator
    private Policies(@JsonProperty("sid")
                     final String sid,
                     @JsonProperty("friendly_name")
                     final String friendlyName,
                     @JsonProperty("requirements")
                     final Map<String, Object> requirements,
                     @JsonProperty("url")
                     final URI url) {
        this.sid = sid;
        this.friendlyName = friendlyName;
        this.requirements = requirements;
        this.url = url;
    }

    /**
     * Returns The unique string that identifies the Policy resource.
     *
     * @return The unique string that identifies the Policy resource
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns A human-readable description of the Policy resource.
     *
     * @return A human-readable description of the Policy resource
     */
    public final String getFriendlyName() {
        return this.friendlyName;
    }

    /**
     * Returns The sid of a Policy object that dictates requirements.
     *
     * @return The sid of a Policy object that dictates requirements
     */
    public final Map<String, Object> getRequirements() {
        return this.requirements;
    }

    /**
     * Returns The absolute URL of the Policy resource.
     *
     * @return The absolute URL of the Policy resource
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Policies other = (Policies) o;

        return Objects.equals(sid, other.sid) &&
               Objects.equals(friendlyName, other.friendlyName) &&
               Objects.equals(requirements, other.requirements) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sid,
                            friendlyName,
                            requirements,
                            url);
    }
}

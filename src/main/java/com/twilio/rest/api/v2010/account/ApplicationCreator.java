/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.twilio.rest.api.v2010.account;

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import java.net.URI;




import java.net.URI;

/*
    * Twilio - Api
    *
    * This is the public Twilio REST API.
    *
    * API version: 1.32.0
    * Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.


public class ApplicationCreator extends Creator<Application>{
    private String accountSid;
    private String apiVersion;
    private URI voiceUrl;
    private HttpMethod voiceMethod;
    private URI voiceFallbackUrl;
    private HttpMethod voiceFallbackMethod;
    private URI statusCallback;
    private HttpMethod statusCallbackMethod;
    private Boolean voiceCallerIdLookup;
    private URI smsUrl;
    private HttpMethod smsMethod;
    private URI smsFallbackUrl;
    private HttpMethod smsFallbackMethod;
    private URI smsStatusCallback;
    private URI messageStatusCallback;
    private String friendlyName;

    public ApplicationCreator() {
    }
    public ApplicationCreator(final String accountSid) {
        this.accountSid = accountSid;
    }

    public ApplicationCreator setApiVersion(final String apiVersion){
        this.apiVersion = apiVersion;
        return this;
    }
    public ApplicationCreator setVoiceUrl(final URI voiceUrl){
        this.voiceUrl = voiceUrl;
        return this;
    }

    public ApplicationCreator setVoiceUrl(final String voiceUrl){
    this.voiceUrl = Promoter.uriFromString(voiceUrl);
    return this;
    }
    public ApplicationCreator setVoiceMethod(final HttpMethod voiceMethod){
        this.voiceMethod = voiceMethod;
        return this;
    }
    public ApplicationCreator setVoiceFallbackUrl(final URI voiceFallbackUrl){
        this.voiceFallbackUrl = voiceFallbackUrl;
        return this;
    }

    public ApplicationCreator setVoiceFallbackUrl(final String voiceFallbackUrl){
    this.voiceFallbackUrl = Promoter.uriFromString(voiceFallbackUrl);
    return this;
    }
    public ApplicationCreator setVoiceFallbackMethod(final HttpMethod voiceFallbackMethod){
        this.voiceFallbackMethod = voiceFallbackMethod;
        return this;
    }
    public ApplicationCreator setStatusCallback(final URI statusCallback){
        this.statusCallback = statusCallback;
        return this;
    }

    public ApplicationCreator setStatusCallback(final String statusCallback){
    this.statusCallback = Promoter.uriFromString(statusCallback);
    return this;
    }
    public ApplicationCreator setStatusCallbackMethod(final HttpMethod statusCallbackMethod){
        this.statusCallbackMethod = statusCallbackMethod;
        return this;
    }
    public ApplicationCreator setVoiceCallerIdLookup(final Boolean voiceCallerIdLookup){
        this.voiceCallerIdLookup = voiceCallerIdLookup;
        return this;
    }
    public ApplicationCreator setSmsUrl(final URI smsUrl){
        this.smsUrl = smsUrl;
        return this;
    }

    public ApplicationCreator setSmsUrl(final String smsUrl){
    this.smsUrl = Promoter.uriFromString(smsUrl);
    return this;
    }
    public ApplicationCreator setSmsMethod(final HttpMethod smsMethod){
        this.smsMethod = smsMethod;
        return this;
    }
    public ApplicationCreator setSmsFallbackUrl(final URI smsFallbackUrl){
        this.smsFallbackUrl = smsFallbackUrl;
        return this;
    }

    public ApplicationCreator setSmsFallbackUrl(final String smsFallbackUrl){
    this.smsFallbackUrl = Promoter.uriFromString(smsFallbackUrl);
    return this;
    }
    public ApplicationCreator setSmsFallbackMethod(final HttpMethod smsFallbackMethod){
        this.smsFallbackMethod = smsFallbackMethod;
        return this;
    }
    public ApplicationCreator setSmsStatusCallback(final URI smsStatusCallback){
        this.smsStatusCallback = smsStatusCallback;
        return this;
    }

    public ApplicationCreator setSmsStatusCallback(final String smsStatusCallback){
    this.smsStatusCallback = Promoter.uriFromString(smsStatusCallback);
    return this;
    }
    public ApplicationCreator setMessageStatusCallback(final URI messageStatusCallback){
        this.messageStatusCallback = messageStatusCallback;
        return this;
    }

    public ApplicationCreator setMessageStatusCallback(final String messageStatusCallback){
    this.messageStatusCallback = Promoter.uriFromString(messageStatusCallback);
    return this;
    }
    public ApplicationCreator setFriendlyName(final String friendlyName){
        this.friendlyName = friendlyName;
        return this;
    }

    @Override
    public Application create(final TwilioRestClient client){
        String path = "/2010-04-01/Accounts/{AccountSid}/Applications.json";

        this.accountSid = this.accountSid == null ? client.getAccountSid() : this.accountSid;
        path = path.replace("{"+"AccountSid"+"}", this.accountSid.toString());

        Request request = new Request(
            HttpMethod.POST,
            Domains.API.toString(),
            path
        );
        addPostParams(request);
        Response response = client.request(request);
        if (response == null) {
            throw new ApiConnectionException("Application creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
            throw new ApiException(restException);
        }

        return Application.fromJson(response.getStream(), client.getObjectMapper());
    }
    private void addPostParams(final Request request) {
        if (apiVersion != null) {
            request.addPostParam("ApiVersion", apiVersion);
    
        }
        if (voiceUrl != null) {
            request.addPostParam("VoiceUrl", voiceUrl.toString());
    
        }
        if (voiceMethod != null) {
            request.addPostParam("VoiceMethod", voiceMethod.toString());
    
        }
        if (voiceFallbackUrl != null) {
            request.addPostParam("VoiceFallbackUrl", voiceFallbackUrl.toString());
    
        }
        if (voiceFallbackMethod != null) {
            request.addPostParam("VoiceFallbackMethod", voiceFallbackMethod.toString());
    
        }
        if (statusCallback != null) {
            request.addPostParam("StatusCallback", statusCallback.toString());
    
        }
        if (statusCallbackMethod != null) {
            request.addPostParam("StatusCallbackMethod", statusCallbackMethod.toString());
    
        }
        if (voiceCallerIdLookup != null) {
            request.addPostParam("VoiceCallerIdLookup", voiceCallerIdLookup.toString());
    
        }
        if (smsUrl != null) {
            request.addPostParam("SmsUrl", smsUrl.toString());
    
        }
        if (smsMethod != null) {
            request.addPostParam("SmsMethod", smsMethod.toString());
    
        }
        if (smsFallbackUrl != null) {
            request.addPostParam("SmsFallbackUrl", smsFallbackUrl.toString());
    
        }
        if (smsFallbackMethod != null) {
            request.addPostParam("SmsFallbackMethod", smsFallbackMethod.toString());
    
        }
        if (smsStatusCallback != null) {
            request.addPostParam("SmsStatusCallback", smsStatusCallback.toString());
    
        }
        if (messageStatusCallback != null) {
            request.addPostParam("MessageStatusCallback", messageStatusCallback.toString());
    
        }
        if (friendlyName != null) {
            request.addPostParam("FriendlyName", friendlyName);
    
        }
    }
}

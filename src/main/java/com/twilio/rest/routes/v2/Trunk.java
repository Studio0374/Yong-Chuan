/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.routes.v2;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class Trunk extends Resource {
    private static final long serialVersionUID = 13001491705512L;

    /**
     * Create a TrunkCreator to execute create.
     *
     * @param pathSipTrunkDomain The SIP Trunk
     * @return TrunkCreator capable of executing the create
     */
    public static TrunkCreator creator(final String pathSipTrunkDomain) {
        return new TrunkCreator(pathSipTrunkDomain);
    }

    /**
     * Create a TrunkUpdater to execute update.
     *
     * @param pathSipTrunkDomain The SIP Trunk
     * @return TrunkUpdater capable of executing the update
     */
    public static TrunkUpdater updater(final String pathSipTrunkDomain) {
        return new TrunkUpdater(pathSipTrunkDomain);
    }

    /**
     * Create a TrunkFetcher to execute fetch.
     *
     * @param pathSipTrunkDomain The SIP Trunk
     * @return TrunkFetcher capable of executing the fetch
     */
    public static TrunkFetcher fetcher(final String pathSipTrunkDomain) {
        return new TrunkFetcher(pathSipTrunkDomain);
    }

    /**
     * Converts a JSON String into a Trunk object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Trunk object represented by the provided JSON
     */
    public static Trunk fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Trunk.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Trunk object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Trunk object represented by the provided JSON
     */
    public static Trunk fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Trunk.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sipTrunkDomain;
    private final URI url;
    private final String sid;
    private final String accountSid;
    private final String friendlyName;
    private final String voiceRegion;
    private final ZonedDateTime dateCreated;
    private final ZonedDateTime dateUpdated;

    @JsonCreator
    private Trunk(@JsonProperty("sip_trunk_domain")
                  final String sipTrunkDomain,
                  @JsonProperty("url")
                  final URI url,
                  @JsonProperty("sid")
                  final String sid,
                  @JsonProperty("account_sid")
                  final String accountSid,
                  @JsonProperty("friendly_name")
                  final String friendlyName,
                  @JsonProperty("voice_region")
                  final String voiceRegion,
                  @JsonProperty("date_created")
                  final String dateCreated,
                  @JsonProperty("date_updated")
                  final String dateUpdated) {
        this.sipTrunkDomain = sipTrunkDomain;
        this.url = url;
        this.sid = sid;
        this.accountSid = accountSid;
        this.friendlyName = friendlyName;
        this.voiceRegion = voiceRegion;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
    }

    /**
     * Returns The SIP Trunk.
     *
     * @return The SIP Trunk
     */
    public final String getSipTrunkDomain() {
        return this.sipTrunkDomain;
    }

    /**
     * Returns The absolute URL of the resource.
     *
     * @return The absolute URL of the resource
     */
    public final URI getUrl() {
        return this.url;
    }

    /**
     * Returns A string that uniquely identifies the Inbound Processing Region
     * assignments for this SIP Trunk..
     *
     * @return A string that uniquely identifies the Inbound Processing Region
     *         assignments for this SIP Trunk.
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns Account Sid..
     *
     * @return Account Sid.
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns A human readable description of the Inbound Processing Region
     * assignments for this SIP Trunk..
     *
     * @return A human readable description of the Inbound Processing Region
     *         assignments for this SIP Trunk.
     */
    public final String getFriendlyName() {
        return this.friendlyName;
    }

    /**
     * Returns The Inbound Processing Region used for this SIP Trunk for voice..
     *
     * @return The Inbound Processing Region used for this SIP Trunk for voice.
     */
    public final String getVoiceRegion() {
        return this.voiceRegion;
    }

    /**
     * Returns The date that this SIP Trunk was assigned an Inbound Processing
     * Region..
     *
     * @return The date that this SIP Trunk was assigned an Inbound Processing
     *         Region.
     */
    public final ZonedDateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The date that the Inbound Processing Region was updated for this SIP
     * Trunk..
     *
     * @return The date that the Inbound Processing Region was updated for this SIP
     *         Trunk.
     */
    public final ZonedDateTime getDateUpdated() {
        return this.dateUpdated;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Trunk other = (Trunk) o;

        return Objects.equals(sipTrunkDomain, other.sipTrunkDomain) &&
               Objects.equals(url, other.url) &&
               Objects.equals(sid, other.sid) &&
               Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(friendlyName, other.friendlyName) &&
               Objects.equals(voiceRegion, other.voiceRegion) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(dateUpdated, other.dateUpdated);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sipTrunkDomain,
                            url,
                            sid,
                            accountSid,
                            friendlyName,
                            voiceRegion,
                            dateCreated,
                            dateUpdated);
    }
}
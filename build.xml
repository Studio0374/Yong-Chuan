<project name="TwilioJava" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
		Twilio Java Helper library
    </description>

  <!-- set global properties for this build -->
  <property file="build.properties"/>
  <property name="project.name" value="${ant.project.name}"/>

  <property name="root.dir" value="."/>

  <property name="src.dir" location="src"/>

  <property name="src.test" location="test"/>

  <property name="build.dir" location="build"/>
  <property name="project.lib.dir" location="lib"/>
  <property name="build.classes.dir" location="${build.dir}/classes"/>

  <property name="test.dir" location="${build.dir}/test"/>
  <property name="test.classes.dir" location="${test.dir}/classes"/>
  <property name="test.data.dir" location="${test.dir}/data"/>
  <property name="test.reports.dir" location="${test.dir}/reports"/>

  <property name="dist.dir"  location="dist"/>
  <property name="dist.doc.dir"  location="${dist.dir}/doc"/>
  <property name="javadoc.dir"  location="${dist.dir}/api"/>

  <property name="target.name" value="${project.name}-${release.version}"/>
  <property name="target.jar" location="${dist.dir}/lib/${target.name}.jar"/>
  <property name="target-dep.jar" location="${dist.dir}/lib/${target.name}-with-dependencies.jar"/>

  <property name="main.class" value="."/>

  <!-- junit properties -->
  <property name="junit.fork" value="true"/>
  <property name="junit.forkmode" value="once"/>

  <!-- here is the version of ivy we will use. change this property to try a newer 
  version if you want -->
  <property name="ivy.install.version" value="2.2.0" />
  <property name="ivy.jar.dir" value="${basedir}/ivy" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="skip.download">
    	<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<echo message="installing ivy..."/>
    	<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
    		 dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!-- ================================= 
          target: install-ivy         
            this target is not necessary if you put ivy.jar in your ant lib directory
            if you already have ivy in your ant lib, you can simply remove this
            target and the dependency the 'go' target has on it
         ================================= -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    	<!-- try to load ivy here from local ivy dir, in case the user has not already dropped
    	      it into ant's lib dir (note that the latter copy will always take precedence).
    	      We will not fail as long as local lib dir exists (it may be empty) and
    	      ivy is in at least one of ant's lib dir or the local lib dir. -->
    	<path id="ivy.lib.path">
    	    <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    	</path>
    	<taskdef resource="org/apache/ivy/ant/antlib.xml"
    	          uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>    


  <target name="noop" />

  <target name="init" depends="install-ivy, classpaths">
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>

    <mkdir dir="${test.dir}"/>
    <mkdir dir="${test.reports.dir}"/>
    <mkdir dir="${test.data.dir}"/>
    <mkdir dir="${test.classes.dir}"/>

    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${dist.doc.dir}"/>
    <mkdir dir="${javadoc.dir}"/>

  </target>

  <target name="compile" depends="init" description="compile the source " >

    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true">
		<classpath refid="compile.classpath"/>
	</javac>

	<copy todir="${build.classes.dir}">
		<fileset dir="src/resources" includes="*"/>
	</copy>

  </target>

  <target name="jar" depends="compile, pom"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}/lib"/>

    <!-- Put everything in ${build} into the jar file -->
    <jar destfile="${target.jar}">
		<fileset dir="${build.classes.dir}"/>
	</jar>

	<jar compress="false" destfile="${target-dep.jar}">
	  <zipgroupfileset dir="${ivy.lib.dir}">
	    <include name="*.jar"/>
	  </zipgroupfileset>
	  <zipgroupfileset dir="${project.lib.dir}">
	    <include name="*.jar"/>
	  </zipgroupfileset>
	  <fileset dir="${build.classes.dir}"/>
	</jar>


  </target>

  <target name="dist" depends="compile,test,javadoc,jar"
        description="generate the distribution" >
	</target>

	<target name="javadoc">
		<javadoc packagenames="com.twilio.sdk.*"
			sourcepath="src/java"
			excludepackagenames=""
			defaultexcludes="yes"
			destdir="${javadoc.dir}"
			author="true"
			version="true"
			use="true"
			windowtitle="Twilio Java">
			<doctitle><![CDATA[<h1>Twilio Java</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2011 Twilio, Inc. All Rights Reserved.</i>]]></bottom>
		</javadoc>
	</target>

  <!-- test target -->

  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="test" depends="jar" description="run tests" >
	<!-- Compile the tests -->
    <javac srcdir="${src.test}" destdir="${test.classes.dir}" debug="true">
		<classpath refid="test.classpath"/>
	</javac>

	<junit printsummary="yes" fork="yes" failureProperty="test.failure">
		<classpath refid="test.classpath"/>
		
		<formatter type="plain"/>
		<formatter type="brief" usefile="false"/>
	

		<batchtest fork="yes" todir="${test.reports.dir}">
   		 	<fileset dir="${test.classes.dir}">
      			<include name="**/*Test.class"/>
    		</fileset>
  		</batchtest>
		
	</junit>

    <fail message="test failed" if="test.failure" />
  </target>

  <!-- Build jar and run exectuable? -->
  <target name="all" description="all" depends="dist"/>

  <target name="run" depends="dist">
	  <java classname="${main.class}" fork="true">
		<classpath refid="test.classpath"/>
	  </java>
  </target>


  <!-- Ivy targets -->
  <target name="ivy-init">
	 <property name="ivy.lib.dir" location="build/ivy/lib"/>
	<property name="ivy.pom.version" value="${release.version}" />
  </target> 

  <target name="ivy-resolve" depends="ivy-init">
	 <ivy:resolve conf="*" />
  </target>

  <target name="ivy-retrieve" depends="ivy-resolve">
	 <ivy:retrieve sync="true"/>
  </target>

  <target name="publish" depends="dist">
        <ivy:publish resolver="local" pubrevision="${release.version}" status="release" update="true" overwrite="true">
                <artifacts pattern="${dist.dir}/lib/${target.name}.[ext]" />
        </ivy:publish>
  </target>
	

  <target name="classpaths" depends="ivy-retrieve">
	 <path id="compile.classpath">
		<fileset dir="${ivy.lib.dir}" includes="*.jar"/>
		<fileset dir="${project.lib.dir}" includes="*.jar"/>
	 </path>

	 <path id="test.compile.classpath">
		<fileset dir="${ivy.lib.dir}" includes="*.jar"/>
		<fileset dir="${project.lib.dir}" includes="*.jar"/>
		<pathelement location="${target.jar}"/>
	 </path>

	 <path id="test.classpath">
		<path refid="test.compile.classpath"/>
		<pathelement location="${test.classes.dir}"/>
	 </path>
  </target>

<target name="pom" depends="init, ivy-resolve">
	<property name="pom.dir" location="${build.classes.dir}/META-INF/maven/${ivy.organisation}.${ivy.module}/${ivy.module}" />
	<mkdir dir="${pom.dir}" /> 
	<ivy:makepom ivyfile="${basedir}/ivy.xml" pomfile="${pom.dir}/pom.xml">
		<mapping conf="default" scope="compile"/>
		<mapping conf="compile" scope="compile"/>
		<mapping conf="runtime" scope="runtime"/>
		<mapping conf="test" scope="test" />
	</ivy:makepom>
	<propertyfile file="${pom.dir}/pom.properties">
		<entry key="version" value="${release.version}" />
		<entry key="groupId" value="${ivy.organisation}" />
		<entry key="artifactId" value="${ivy.module}" />
	</propertyfile>
	<copy file="${pom.dir}/pom.xml" todir="${dist.dir}" />
</target>

</project>
